// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o1vPdgLXqG8oxG6Tov2xRt
// Component: hR8fgawWTg
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_empty_project_mobile_first.module.css"; // plasmic-import: o1vPdgLXqG8oxG6Tov2xRt/projectcss
import * as sty from "./Plasmic_22.module.css"; // plasmic-import: hR8fgawWTg/css
import MaskIcon from "./icons/PlasmicIcon__Mask"; // plasmic-import: PW6nB-ZdXb6/icon

export const Plasmic_22__VariantProps = new Array();

export const Plasmic_22__ArgProps = new Array();

function Plasmic_22__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"iPhone861"}
            data-plasmic-override={overrides.iPhone861}
            className={classNames(defaultcss.all, sty.iPhone861)}
          >
            {false ? (
              <div
                data-plasmic-name={"icons5"}
                data-plasmic-override={overrides.icons5}
                className={classNames(defaultcss.all, sty.icons5)}
              >
                <div
                  data-plasmic-name={"overflow5"}
                  data-plasmic-override={overrides.overflow5}
                  className={classNames(defaultcss.all, sty.overflow5)}
                />

                <div
                  data-plasmic-name={"icon35"}
                  data-plasmic-override={overrides.icon35}
                  className={classNames(defaultcss.all, sty.icon35)}
                />

                <div
                  data-plasmic-name={"icon25"}
                  data-plasmic-override={overrides.icon25}
                  className={classNames(defaultcss.all, sty.icon25)}
                />

                <div
                  data-plasmic-name={"icon15"}
                  data-plasmic-override={overrides.icon15}
                  className={classNames(defaultcss.all, sty.icon15)}
                />
              </div>
            ) : null}

            <div
              data-plasmic-name={"asset112"}
              data-plasmic-override={overrides.asset112}
              className={classNames(defaultcss.all, sty.asset112)}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___5BiYi
              )}
            >
              {"We listen, we care."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__vQbpN
              )}
            >
              {"*alpha"}
            </div>

            <div
              data-plasmic-name={"rectangle152"}
              data-plasmic-override={overrides.rectangle152}
              className={classNames(defaultcss.all, sty.rectangle152)}
            />

            <div
              data-plasmic-name={"rectangle20"}
              data-plasmic-override={overrides.rectangle20}
              className={classNames(defaultcss.all, sty.rectangle20)}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__ke5WD
              )}
            >
              {"V.0.0.1"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__jOpFx
              )}
            >
              {"*alpha"}
            </div>

            {false ? (
              <div
                data-plasmic-name={"ωAtomsSystemBarDark5"}
                data-plasmic-override={overrides.ωAtomsSystemBarDark5}
                className={classNames(defaultcss.all, sty.ωAtomsSystemBarDark5)}
              >
                <div
                  data-plasmic-name={"rectangle21"}
                  data-plasmic-override={overrides.rectangle21}
                  className={classNames(defaultcss.all, sty.rectangle21)}
                />

                <MaskIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(defaultcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "iPhone861",
    "icons5",
    "overflow5",
    "icon35",
    "icon25",
    "icon15",
    "asset112",
    "rectangle152",
    "rectangle20",
    "ωAtomsSystemBarDark5",
    "rectangle21",
    "svg"
  ],

  iPhone861: [
    "iPhone861",
    "icons5",
    "overflow5",
    "icon35",
    "icon25",
    "icon15",
    "asset112",
    "rectangle152",
    "rectangle20",
    "ωAtomsSystemBarDark5",
    "rectangle21",
    "svg"
  ],

  icons5: ["icons5", "overflow5", "icon35", "icon25", "icon15"],
  overflow5: ["overflow5"],
  icon35: ["icon35"],
  icon25: ["icon25"],
  icon15: ["icon15"],
  asset112: ["asset112"],
  rectangle152: ["rectangle152"],
  rectangle20: ["rectangle20"],
  ωAtomsSystemBarDark5: ["ωAtomsSystemBarDark5", "rectangle21", "svg"],
  rectangle21: ["rectangle21"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_22__ArgProps,
      internalVariantPropNames: Plasmic_22__VariantProps
    });

    return Plasmic_22__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_22";
  } else {
    func.displayName = `Plasmic_22.${nodeName}`;
  }
  return func;
}

export const Plasmic_22 = Object.assign(
  // Top-level Plasmic_22 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iPhone861: makeNodeComponent("iPhone861"),
    icons5: makeNodeComponent("icons5"),
    overflow5: makeNodeComponent("overflow5"),
    icon35: makeNodeComponent("icon35"),
    icon25: makeNodeComponent("icon25"),
    icon15: makeNodeComponent("icon15"),
    asset112: makeNodeComponent("asset112"),
    rectangle152: makeNodeComponent("rectangle152"),
    rectangle20: makeNodeComponent("rectangle20"),
    ωAtomsSystemBarDark5: makeNodeComponent("ωAtomsSystemBarDark5"),
    rectangle21: makeNodeComponent("rectangle21"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for Plasmic_22
    internalVariantProps: Plasmic_22__VariantProps,
    internalArgProps: Plasmic_22__ArgProps
  }
);

export default Plasmic_22;
/* prettier-ignore-end */

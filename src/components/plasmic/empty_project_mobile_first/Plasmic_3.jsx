// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o1vPdgLXqG8oxG6Tov2xRt
// Component: 3gx_Nm6Ol1
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_empty_project_mobile_first.module.css"; // plasmic-import: o1vPdgLXqG8oxG6Tov2xRt/projectcss
import * as sty from "./Plasmic_3.module.css"; // plasmic-import: 3gx_Nm6Ol1/css
import BaseFabExtendedAtomsDiamond2Icon from "./icons/PlasmicIcon__BaseFabExtendedAtomsDiamond2"; // plasmic-import: atsv3shmpol/icon
import MaskIcon from "./icons/PlasmicIcon__Mask"; // plasmic-import: PW6nB-ZdXb6/icon

export const Plasmic_3__VariantProps = new Array();

export const Plasmic_3__ArgProps = new Array();

function Plasmic_3__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"iPhone846"}
            data-plasmic-override={overrides.iPhone846}
            className={classNames(defaultcss.all, sty.iPhone846)}
          >
            {false ? (
              <div
                data-plasmic-name={"icons"}
                data-plasmic-override={overrides.icons}
                className={classNames(defaultcss.all, sty.icons)}
              >
                <div
                  data-plasmic-name={"overflow"}
                  data-plasmic-override={overrides.overflow}
                  className={classNames(defaultcss.all, sty.overflow)}
                />

                <div
                  data-plasmic-name={"icon3"}
                  data-plasmic-override={overrides.icon3}
                  className={classNames(defaultcss.all, sty.icon3)}
                />

                <div
                  data-plasmic-name={"icon2"}
                  data-plasmic-override={overrides.icon2}
                  className={classNames(defaultcss.all, sty.icon2)}
                />

                <div
                  data-plasmic-name={"icon1"}
                  data-plasmic-override={overrides.icon1}
                  className={classNames(defaultcss.all, sty.icon1)}
                />
              </div>
            ) : null}

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__f7LPl
              )}
            >
              {
                "We know things can get rough sometimes. \nBut we can work it out here together, anytime."
              }
            </div>

            <a
              data-plasmic-name={"buttons"}
              data-plasmic-override={overrides.buttons}
              className={classNames(defaultcss.all, sty.buttons)}
              href={"/4"}
            >
              <div
                data-plasmic-name={"baseFabExtendedAtomsCircle"}
                data-plasmic-override={overrides.baseFabExtendedAtomsCircle}
                className={classNames(
                  defaultcss.all,
                  sty.baseFabExtendedAtomsCircle
                )}
              >
                <div
                  data-plasmic-name={"rectangle"}
                  data-plasmic-override={overrides.rectangle}
                  className={classNames(defaultcss.all, sty.rectangle)}
                />
              </div>

              <div
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.label
                )}
              >
                {"GEt started"}
              </div>
            </a>

            <div
              data-plasmic-name={"buttons2"}
              data-plasmic-override={overrides.buttons2}
              className={classNames(defaultcss.all, sty.buttons2)}
            >
              <div
                data-plasmic-name={"baseFabExtendedFabExtendedMasterShape"}
                data-plasmic-override={
                  overrides.baseFabExtendedFabExtendedMasterShape
                }
                className={classNames(
                  defaultcss.all,
                  sty.baseFabExtendedFabExtendedMasterShape
                )}
              >
                {false ? (
                  <div
                    data-plasmic-name={"baseFabExtendedAtomsSquircle"}
                    data-plasmic-override={
                      overrides.baseFabExtendedAtomsSquircle
                    }
                    className={classNames(
                      defaultcss.all,
                      sty.baseFabExtendedAtomsSquircle
                    )}
                  >
                    <div
                      data-plasmic-name={"baseSurfaceShapeAtomsSquare"}
                      data-plasmic-override={
                        overrides.baseSurfaceShapeAtomsSquare
                      }
                      className={classNames(
                        defaultcss.all,
                        sty.baseSurfaceShapeAtomsSquare
                      )}
                    >
                      <div
                        data-plasmic-name={"rectangle2"}
                        data-plasmic-override={overrides.rectangle2}
                        className={classNames(defaultcss.all, sty.rectangle2)}
                      />
                    </div>
                  </div>
                ) : null}
                {false ? (
                  <BaseFabExtendedAtomsDiamond2Icon
                    className={classNames(defaultcss.all, sty.svg__y3CDu)}
                    role={"img"}
                  />
                ) : null}

                <div
                  data-plasmic-name={"baseFabExtendedAtomsCircle2"}
                  data-plasmic-override={overrides.baseFabExtendedAtomsCircle2}
                  className={classNames(
                    defaultcss.all,
                    sty.baseFabExtendedAtomsCircle2
                  )}
                >
                  <div
                    data-plasmic-name={"rectangle3"}
                    data-plasmic-override={overrides.rectangle3}
                    className={classNames(defaultcss.all, sty.rectangle3)}
                  />
                </div>
              </div>

              <div
                data-plasmic-name={"label2"}
                data-plasmic-override={overrides.label2}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.label2
                )}
              >
                {"Sign in"}
              </div>
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__xEsA
              )}
            >
              {"Always here, just for you"}
            </div>

            <div
              data-plasmic-name={"landingPage01021"}
              data-plasmic-override={overrides.landingPage01021}
              className={classNames(defaultcss.all, sty.landingPage01021)}
            />

            <div
              data-plasmic-name={"asset1"}
              data-plasmic-override={overrides.asset1}
              className={classNames(defaultcss.all, sty.asset1)}
            />

            {false ? (
              <div
                data-plasmic-name={"ωAtomsSystemBarDark"}
                data-plasmic-override={overrides.ωAtomsSystemBarDark}
                className={classNames(defaultcss.all, sty.ωAtomsSystemBarDark)}
              >
                <div
                  data-plasmic-name={"rectangle4"}
                  data-plasmic-override={overrides.rectangle4}
                  className={classNames(defaultcss.all, sty.rectangle4)}
                />

                <MaskIcon
                  className={classNames(defaultcss.all, sty.svg__dtydn)}
                  role={"img"}
                />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "iPhone846",
    "icons",
    "overflow",
    "icon3",
    "icon2",
    "icon1",
    "buttons",
    "baseFabExtendedAtomsCircle",
    "rectangle",
    "label",
    "buttons2",
    "baseFabExtendedFabExtendedMasterShape",
    "baseFabExtendedAtomsSquircle",
    "baseSurfaceShapeAtomsSquare",
    "rectangle2",
    "baseFabExtendedAtomsCircle2",
    "rectangle3",
    "label2",
    "landingPage01021",
    "asset1",
    "ωAtomsSystemBarDark",
    "rectangle4"
  ],

  iPhone846: [
    "iPhone846",
    "icons",
    "overflow",
    "icon3",
    "icon2",
    "icon1",
    "buttons",
    "baseFabExtendedAtomsCircle",
    "rectangle",
    "label",
    "buttons2",
    "baseFabExtendedFabExtendedMasterShape",
    "baseFabExtendedAtomsSquircle",
    "baseSurfaceShapeAtomsSquare",
    "rectangle2",
    "baseFabExtendedAtomsCircle2",
    "rectangle3",
    "label2",
    "landingPage01021",
    "asset1",
    "ωAtomsSystemBarDark",
    "rectangle4"
  ],

  icons: ["icons", "overflow", "icon3", "icon2", "icon1"],
  overflow: ["overflow"],
  icon3: ["icon3"],
  icon2: ["icon2"],
  icon1: ["icon1"],
  buttons: ["buttons", "baseFabExtendedAtomsCircle", "rectangle", "label"],
  baseFabExtendedAtomsCircle: ["baseFabExtendedAtomsCircle", "rectangle"],
  rectangle: ["rectangle"],
  label: ["label"],
  buttons2: [
    "buttons2",
    "baseFabExtendedFabExtendedMasterShape",
    "baseFabExtendedAtomsSquircle",
    "baseSurfaceShapeAtomsSquare",
    "rectangle2",
    "baseFabExtendedAtomsCircle2",
    "rectangle3",
    "label2"
  ],

  baseFabExtendedFabExtendedMasterShape: [
    "baseFabExtendedFabExtendedMasterShape",
    "baseFabExtendedAtomsSquircle",
    "baseSurfaceShapeAtomsSquare",
    "rectangle2",
    "baseFabExtendedAtomsCircle2",
    "rectangle3"
  ],

  baseFabExtendedAtomsSquircle: [
    "baseFabExtendedAtomsSquircle",
    "baseSurfaceShapeAtomsSquare",
    "rectangle2"
  ],

  baseSurfaceShapeAtomsSquare: ["baseSurfaceShapeAtomsSquare", "rectangle2"],
  rectangle2: ["rectangle2"],
  baseFabExtendedAtomsCircle2: ["baseFabExtendedAtomsCircle2", "rectangle3"],
  rectangle3: ["rectangle3"],
  label2: ["label2"],
  landingPage01021: ["landingPage01021"],
  asset1: ["asset1"],
  ωAtomsSystemBarDark: ["ωAtomsSystemBarDark", "rectangle4"],
  rectangle4: ["rectangle4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_3__ArgProps,
      internalVariantPropNames: Plasmic_3__VariantProps
    });

    return Plasmic_3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_3";
  } else {
    func.displayName = `Plasmic_3.${nodeName}`;
  }
  return func;
}

export const Plasmic_3 = Object.assign(
  // Top-level Plasmic_3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iPhone846: makeNodeComponent("iPhone846"),
    icons: makeNodeComponent("icons"),
    overflow: makeNodeComponent("overflow"),
    icon3: makeNodeComponent("icon3"),
    icon2: makeNodeComponent("icon2"),
    icon1: makeNodeComponent("icon1"),
    buttons: makeNodeComponent("buttons"),
    baseFabExtendedAtomsCircle: makeNodeComponent("baseFabExtendedAtomsCircle"),
    rectangle: makeNodeComponent("rectangle"),
    label: makeNodeComponent("label"),
    buttons2: makeNodeComponent("buttons2"),
    baseFabExtendedFabExtendedMasterShape: makeNodeComponent(
      "baseFabExtendedFabExtendedMasterShape"
    ),

    baseFabExtendedAtomsSquircle: makeNodeComponent(
      "baseFabExtendedAtomsSquircle"
    ),

    baseSurfaceShapeAtomsSquare: makeNodeComponent(
      "baseSurfaceShapeAtomsSquare"
    ),

    rectangle2: makeNodeComponent("rectangle2"),
    baseFabExtendedAtomsCircle2: makeNodeComponent(
      "baseFabExtendedAtomsCircle2"
    ),

    rectangle3: makeNodeComponent("rectangle3"),
    label2: makeNodeComponent("label2"),
    landingPage01021: makeNodeComponent("landingPage01021"),
    asset1: makeNodeComponent("asset1"),
    ωAtomsSystemBarDark: makeNodeComponent("ωAtomsSystemBarDark"),
    rectangle4: makeNodeComponent("rectangle4"),
    // Metadata about props expected for Plasmic_3
    internalVariantProps: Plasmic_3__VariantProps,
    internalArgProps: Plasmic_3__ArgProps
  }
);

export default Plasmic_3;
/* prettier-ignore-end */

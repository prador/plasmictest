// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: o1vPdgLXqG8oxG6Tov2xRt
// Component: 1AIbx2mUfA
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_empty_project_mobile_first.module.css"; // plasmic-import: o1vPdgLXqG8oxG6Tov2xRt/projectcss
import * as sty from "./Plasmic_1.module.css"; // plasmic-import: 1AIbx2mUfA/css
import MaskIcon from "./icons/PlasmicIcon__Mask"; // plasmic-import: PW6nB-ZdXb6/icon

export const Plasmic_1__VariantProps = new Array();

export const Plasmic_1__ArgProps = new Array();

function Plasmic_1__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"iPhone868"}
            data-plasmic-override={overrides.iPhone868}
            className={classNames(defaultcss.all, sty.iPhone868)}
          >
            {false ? (
              <div
                data-plasmic-name={"icons6"}
                data-plasmic-override={overrides.icons6}
                className={classNames(defaultcss.all, sty.icons6)}
              >
                <div
                  data-plasmic-name={"overflow6"}
                  data-plasmic-override={overrides.overflow6}
                  className={classNames(defaultcss.all, sty.overflow6)}
                />

                <div
                  data-plasmic-name={"icon36"}
                  data-plasmic-override={overrides.icon36}
                  className={classNames(defaultcss.all, sty.icon36)}
                />

                <div
                  data-plasmic-name={"icon26"}
                  data-plasmic-override={overrides.icon26}
                  className={classNames(defaultcss.all, sty.icon26)}
                />

                <div
                  data-plasmic-name={"icon16"}
                  data-plasmic-override={overrides.icon16}
                  className={classNames(defaultcss.all, sty.icon16)}
                />
              </div>
            ) : null}

            <div
              data-plasmic-name={"asset113"}
              data-plasmic-override={overrides.asset113}
              className={classNames(defaultcss.all, sty.asset113)}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__eECzW
              )}
            >
              {"We listen, we care."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__vJmi
              )}
            >
              {"V.0.0.1"}
            </div>

            <div
              data-plasmic-name={"rectangle22"}
              data-plasmic-override={overrides.rectangle22}
              className={classNames(defaultcss.all, sty.rectangle22)}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___2Goaw
              )}
            >
              {"*alpha"}
            </div>

            {false ? (
              <div
                data-plasmic-name={"ωAtomsSystemBarDark6"}
                data-plasmic-override={overrides.ωAtomsSystemBarDark6}
                className={classNames(defaultcss.all, sty.ωAtomsSystemBarDark6)}
              >
                <div
                  data-plasmic-name={"rectangle23"}
                  data-plasmic-override={overrides.rectangle23}
                  className={classNames(defaultcss.all, sty.rectangle23)}
                />

                <MaskIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(defaultcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "iPhone868",
    "icons6",
    "overflow6",
    "icon36",
    "icon26",
    "icon16",
    "asset113",
    "rectangle22",
    "ωAtomsSystemBarDark6",
    "rectangle23",
    "svg"
  ],

  iPhone868: [
    "iPhone868",
    "icons6",
    "overflow6",
    "icon36",
    "icon26",
    "icon16",
    "asset113",
    "rectangle22",
    "ωAtomsSystemBarDark6",
    "rectangle23",
    "svg"
  ],

  icons6: ["icons6", "overflow6", "icon36", "icon26", "icon16"],
  overflow6: ["overflow6"],
  icon36: ["icon36"],
  icon26: ["icon26"],
  icon16: ["icon16"],
  asset113: ["asset113"],
  rectangle22: ["rectangle22"],
  ωAtomsSystemBarDark6: ["ωAtomsSystemBarDark6", "rectangle23", "svg"],
  rectangle23: ["rectangle23"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: Plasmic_1__ArgProps,
      internalVariantPropNames: Plasmic_1__VariantProps
    });

    return Plasmic_1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_1";
  } else {
    func.displayName = `Plasmic_1.${nodeName}`;
  }
  return func;
}

export const Plasmic_1 = Object.assign(
  // Top-level Plasmic_1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iPhone868: makeNodeComponent("iPhone868"),
    icons6: makeNodeComponent("icons6"),
    overflow6: makeNodeComponent("overflow6"),
    icon36: makeNodeComponent("icon36"),
    icon26: makeNodeComponent("icon26"),
    icon16: makeNodeComponent("icon16"),
    asset113: makeNodeComponent("asset113"),
    rectangle22: makeNodeComponent("rectangle22"),
    ωAtomsSystemBarDark6: makeNodeComponent("ωAtomsSystemBarDark6"),
    rectangle23: makeNodeComponent("rectangle23"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for Plasmic_1
    internalVariantProps: Plasmic_1__VariantProps,
    internalArgProps: Plasmic_1__ArgProps
  }
);

export default Plasmic_1;
/* prettier-ignore-end */

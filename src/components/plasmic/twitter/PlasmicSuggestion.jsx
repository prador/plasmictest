// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v3r5FjeHwUDiayAfitwffE
// Component: FePYc5ZNICg1Lo
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: ZJMIeo5BqZDP_/component
import Button from "../../Button"; // plasmic-import: 9_2TomNy2in1dV/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_twitter.module.css"; // plasmic-import: v3r5FjeHwUDiayAfitwffE/projectcss
import * as sty from "./PlasmicSuggestion.module.css"; // plasmic-import: FePYc5ZNICg1Lo/css
import image2W7Z332PGftT7L1 from "./images/image2.png"; // plasmic-import: W7Z332PGftT7l1/picture

export const PlasmicSuggestion__VariantProps = new Array();

export const PlasmicSuggestion__ArgProps = new Array(
  "children",
  "slot",
  "slot2"
);

function PlasmicSuggestion__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Avatar
        data-plasmic-name={"avatar"}
        data-plasmic-override={overrides.avatar}
        className={classNames("__wab_instance", sty.avatar)}
      >
        <p.PlasmicSlot
          defaultContents={
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__nyrkg)}
              role={"img"}
              src={image2W7Z332PGftT7L1}
            />
          }
          value={args.children}
        />
      </Avatar>

      <div className={classNames(defaultcss.all, sty.box__lm1Ir)}>
        <div className={classNames(defaultcss.all, sty.box__zId6M)}>
          <div className={classNames(defaultcss.all, sty.box___3Cad8)}>
            <p.PlasmicSlot
              defaultContents={"Matt Wright"}
              value={args.slot}
              className={classNames(sty.slotSlot)}
            />
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.box__fuzvr)}>
          <p.PlasmicSlot
            defaultContents={"@mattwright"}
            value={args.slot2}
            className={classNames(sty.slotSlot2)}
          />
        </div>
      </div>

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "avatar", "button"],
  avatar: ["avatar"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSuggestion__ArgProps,
      internalVariantPropNames: PlasmicSuggestion__VariantProps
    });

    return PlasmicSuggestion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSuggestion";
  } else {
    func.displayName = `PlasmicSuggestion.${nodeName}`;
  }
  return func;
}

export const PlasmicSuggestion = Object.assign(
  // Top-level PlasmicSuggestion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicSuggestion
    internalVariantProps: PlasmicSuggestion__VariantProps,
    internalArgProps: PlasmicSuggestion__ArgProps
  }
);

export default PlasmicSuggestion;
/* prettier-ignore-end */

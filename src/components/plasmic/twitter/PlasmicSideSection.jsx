// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v3r5FjeHwUDiayAfitwffE
// Component: 7z0ezgcPx3-n0n
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Trend from "../../Trend"; // plasmic-import: WuNoJCHhbEyBYe/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_twitter.module.css"; // plasmic-import: v3r5FjeHwUDiayAfitwffE/projectcss
import * as sty from "./PlasmicSideSection.module.css"; // plasmic-import: 7z0ezgcPx3-n0n/css

export const PlasmicSideSection__VariantProps = new Array();

export const PlasmicSideSection__ArgProps = new Array("children", "slot");

function PlasmicSideSection__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__m6Nk1)}>
        <div className={classNames(defaultcss.all, sty.box___5L0K3)}>
          <p.PlasmicSlot
            defaultContents={"What's happening"}
            value={args.children}
            className={classNames(sty.slotChildren)}
          />
        </div>
      </div>

      <div className={classNames(defaultcss.all, sty.box__iUKlS)}>
        <p.PlasmicSlot
          defaultContents={
            <React.Fragment>
              <Trend
                className={classNames("__wab_instance", sty.trend__ylK9)}
              />

              <Trend
                className={classNames("__wab_instance", sty.trend__lHbbQ)}
              />
            </React.Fragment>
          }
          value={args.slot}
        />
      </div>

      <a
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(defaultcss.all, defaultcss.__wab_text, sty.link)}
        href={"#"}
      >
        {"Show more"}
      </a>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideSection__ArgProps,
      internalVariantPropNames: PlasmicSideSection__VariantProps
    });

    return PlasmicSideSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideSection";
  } else {
    func.displayName = `PlasmicSideSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSideSection = Object.assign(
  // Top-level PlasmicSideSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicSideSection
    internalVariantProps: PlasmicSideSection__VariantProps,
    internalArgProps: PlasmicSideSection__ArgProps
  }
);

export default PlasmicSideSection;
/* prettier-ignore-end */

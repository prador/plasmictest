// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v3r5FjeHwUDiayAfitwffE
// Component: NASyORUGBEVIc
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_twitter.module.css"; // plasmic-import: v3r5FjeHwUDiayAfitwffE/projectcss
import * as sty from "./PlasmicActionButton.module.css"; // plasmic-import: NASyORUGBEVIc/css
import ReplyIcon from "./icons/PlasmicIcon__Reply"; // plasmic-import: 9PMx01lrUjcJCh/icon

export const PlasmicActionButton__VariantProps = new Array("options");

export const PlasmicActionButton__ArgProps = new Array("children", "slot");

function PlasmicActionButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__options_labeled]: hasVariant(
            variants,
            "options",
            "labeled"
          ),

          [sty.root__options_large]: hasVariant(variants, "options", "large"),
          [sty.root__options_medium]: hasVariant(variants, "options", "medium")
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        className={classNames(defaultcss.all, sty.box__hzX11, {
          [sty.box__options_large__hzX11FAj8O]: hasVariant(
            variants,
            "options",
            "large"
          ),

          [sty.box__options_medium__hzX11Mi695]: hasVariant(
            variants,
            "options",
            "medium"
          )
        })}
      >
        {(triggers.hover_root ? true : true) ? (
          <div
            className={classNames(defaultcss.all, sty.box__u3MsJ, {
              [sty.box__options_labeled__u3MsJshHbm]: hasVariant(
                variants,
                "options",
                "labeled"
              ),

              [sty.box__options_medium__u3MsJMi695]: hasVariant(
                variants,
                "options",
                "medium"
              )
            })}
          />
        ) : null}
        <p.PlasmicSlot
          defaultContents={
            <ReplyIcon
              className={classNames(defaultcss.all, sty.svg___0UvgC)}
              role={"img"}
            />
          }
          value={args.children}
          className={classNames(sty.slotChildren, {
            [sty.slotChildren__options_medium]: hasVariant(
              variants,
              "options",
              "medium"
            ),

            [sty.slotChildren__options_primary]: hasVariant(
              variants,
              "options",
              "primary"
            )
          })}
        />
      </div>

      {(hasVariant(variants, "options", "labeled") ? true : false) ? (
        <p.PlasmicSlot
          defaultContents={"25"}
          value={args.slot}
          className={classNames(sty.slotSlot, {
            [sty.slotSlot__options_labeled]: hasVariant(
              variants,
              "options",
              "labeled"
            )
          })}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActionButton__ArgProps,
      internalVariantPropNames: PlasmicActionButton__VariantProps
    });

    return PlasmicActionButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActionButton";
  } else {
    func.displayName = `PlasmicActionButton.${nodeName}`;
  }
  return func;
}

export const PlasmicActionButton = Object.assign(
  // Top-level PlasmicActionButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicActionButton
    internalVariantProps: PlasmicActionButton__VariantProps,
    internalArgProps: PlasmicActionButton__ArgProps
  }
);

export default PlasmicActionButton;
/* prettier-ignore-end */
